[tool.poetry]
name = "stapi-fastapi"
# placeholder version filled by poetry-dynamic-versioning
version = "0.0.0"
description = "Sensor Tasking API (STAPI) with FastAPI"
authors = ["Christian Wygoda <christian.wygoda@wygoda.net>"]
license = "MIT"
readme = "README.md"
packages = [{include = "stapi_fastapi", from="src"}]

[tool.poetry.dependencies]
python = "^3.12.0"
fastapi = "^0.115.0"
pydantic = "^2.10.1"
geojson-pydantic = "^1.1.1"
pygeofilter = "^0.2.4"
returns = "^0.23.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
httpx = ">=0.27.0"
nox = ">=2024.4.15"
mypy = ">=1.13.0"
pre-commit = ">=4.1.0"
pre-commit-hooks = ">=4.6.0"
pydantic-settings = ">=2.2.1"
pymarkdownlnt = ">=0.9.25"
pyrfc3339 = ">=1.1"
pytest = ">=8.1.1"
pytest-coverage = ">=0.0"
ruff = ">=0.9"
types-pyRFC3339 = ">=1.1.1"
uvicorn = ">=0.29.0"

[tool.poetry.scripts]
dev = "stapi_fastapi.__dev__:cli"

[tool.ruff]
line-length = 88

[tool.ruff.format]
quote-style = 'double'

[tool.ruff.lint]
extend-ignore = ["E501", "UP007", "UP034"]
select = [
    "C9",
    "E",
    "F",
    "I",
    "W",
    "UP"
]

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.coverage.report]
show_missing = true
skip_empty = true
sort = "Cover"
omit = [
    "tests/**/*.py",
    "stapi_fastapi/__dev__.py",
]

[tool.pytest.ini_options]
addopts="--cov=stapi_fastapi"
filterwarnings = [
    "ignore:The 'app' shortcut is now deprecated.:DeprecationWarning",
    "ignore:Pydantic serializer warnings:UserWarning",
]
markers = [
    "mock_products",
]

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0",]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = true

[[tool.mypy.overrides]]
module = "pygeofilter.parsers.*"
ignore_missing_imports = true

# [tool.mypy]
#plugins = ['pydantic.mypy']

[tool.pymarkdown]
plugins.md013.line_length = 120
plugins.md024.enabled = false # duplicate headers
